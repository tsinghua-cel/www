import{_ as a,c as e,o as n,ae as t}from"./chunks/framework.CLBIubxr.js";const g=JSON.parse('{"title":"Basic Usage","description":"","frontmatter":{},"headers":[],"relativePath":"usage.md","filePath":"usage.md"}'),p={name:"usage.md"};function i(c,s,l,r,h,o){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-label="Permalink to &quot;Basic Usage&quot;">​</a></h1><p>We have integrated <code>Bunnyfinder</code> into the <code>ethereum-package</code>. You can run tests on an Ethereum PoS network with multiple client versions. Below is an example of running tests and retrieving the results.</p><h2 id="start-the-test" tabindex="-1">Start the Test <a class="header-anchor" href="#start-the-test" aria-label="Permalink to &quot;Start the Test&quot;">​</a></h2><p>First, you need to start the test environment. The test environment is based on the <code>mysql</code> database and <code>bfbackend</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>Then, use the following command to start the test.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts/run.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bftest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./networkparams/example</span></span></code></pre></div><p>Here, we are running three sets of beacon nodes, each using a different client. The execution layer includes <code>besu</code>, <code>geth</code>, and <code>nethermind</code>, while the consensus layer includes <code>prysm</code>, <code>lighthouse</code>, and <code>teku</code>.</p><p>When the following log appears, it indicates that the entire test has run successfully.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>========================================== User Services ==========================================</span></span>
<span class="line"><span>UUID           Name                                             Ports                                         Status</span></span>
<span class="line"><span>90ee4bff7ac7   bunnyfinder                                      http: 19000/tcp -&gt; http://127.0.0.1:32828     RUNNING</span></span>
<span class="line"><span>0a95359926df   cl-1-prysm-besu                                  http: 3500/tcp -&gt; http://127.0.0.1:32819      RUNNING</span></span>
<span class="line"><span>                                                                metrics: 8080/tcp -&gt; http://127.0.0.1:32816   </span></span>
<span class="line"><span>                                                                profiling: 6060/tcp -&gt; 127.0.0.1:32817        </span></span>
<span class="line"><span>                                                                rpc: 4000/tcp -&gt; 127.0.0.1:32818              </span></span>
<span class="line"><span>                                                                tcp-discovery: 13000/tcp -&gt; 127.0.0.1:32815   </span></span>
<span class="line"><span>                                                                udp-discovery: 12000/udp -&gt; 127.0.0.1:32777   </span></span>
<span class="line"><span>895d9bf907f9   cl-2-lighthouse-geth                             http: 4000/tcp -&gt; http://127.0.0.1:32822      RUNNING</span></span>
<span class="line"><span>                                                                metrics: 5054/tcp -&gt; http://127.0.0.1:32821   </span></span>
<span class="line"><span>                                                                tcp-discovery: 9000/tcp -&gt; 127.0.0.1:32820    </span></span>
<span class="line"><span>                                                                udp-discovery: 9000/udp -&gt; 127.0.0.1:32778    </span></span>
<span class="line"><span>5c8e2e2c7c7d   cl-3-teku-nethermind                             http: 4000/tcp -&gt; http://127.0.0.1:32825      RUNNING</span></span>
<span class="line"><span>                                                                metrics: 8008/tcp -&gt; http://127.0.0.1:32824   </span></span>
<span class="line"><span>                                                                tcp-discovery: 9000/tcp -&gt; 127.0.0.1:32823    </span></span>
<span class="line"><span>                                                                udp-discovery: 9000/udp -&gt; 127.0.0.1:32779    </span></span>
<span class="line"><span>af977800bf29   el-1-besu-prysm                                  engine-rpc: 8551/tcp -&gt; 127.0.0.1:32802       RUNNING</span></span>
<span class="line"><span>                                                                metrics: 9001/tcp -&gt; http://127.0.0.1:32801   </span></span>
<span class="line"><span>                                                                rpc: 8545/tcp -&gt; 127.0.0.1:32804              </span></span>
<span class="line"><span>                                                                tcp-discovery: 30303/tcp -&gt; 127.0.0.1:32800   </span></span>
<span class="line"><span>                                                                udp-discovery: 30303/udp -&gt; 127.0.0.1:32774   </span></span>
<span class="line"><span>                                                                ws: 8546/tcp -&gt; 127.0.0.1:32803               </span></span>
<span class="line"><span>b861d349ff1a   el-2-geth-lighthouse                             engine-rpc: 8551/tcp -&gt; 127.0.0.1:32807       RUNNING</span></span>
<span class="line"><span>                                                                metrics: 9001/tcp -&gt; http://127.0.0.1:32806   </span></span>
<span class="line"><span>                                                                rpc: 8545/tcp -&gt; 127.0.0.1:32809              </span></span>
<span class="line"><span>                                                                tcp-discovery: 30303/tcp -&gt; 127.0.0.1:32805   </span></span>
<span class="line"><span>                                                                udp-discovery: 30303/udp -&gt; 127.0.0.1:32775   </span></span>
<span class="line"><span>                                                                ws: 8546/tcp -&gt; 127.0.0.1:32808               </span></span>
<span class="line"><span>8900b3150379   el-3-nethermind-teku                             engine-rpc: 8551/tcp -&gt; 127.0.0.1:32812       RUNNING</span></span>
<span class="line"><span>                                                                metrics: 9001/tcp -&gt; http://127.0.0.1:32811   </span></span>
<span class="line"><span>                                                                rpc: 8545/tcp -&gt; 127.0.0.1:32814              </span></span>
<span class="line"><span>                                                                tcp-discovery: 30303/tcp -&gt; 127.0.0.1:32810   </span></span>
<span class="line"><span>                                                                udp-discovery: 30303/udp -&gt; 127.0.0.1:32776   </span></span>
<span class="line"><span>                                                                ws: 8546/tcp -&gt; 127.0.0.1:32813               </span></span>
<span class="line"><span>5578c58fd8d8   validator-key-generation-cl-validator-keystore   &lt;none&gt;                                        RUNNING</span></span>
<span class="line"><span>ff8b93b77564   vc-1-besu-prysm                                  metrics: 8080/tcp -&gt; http://127.0.0.1:32826   RUNNING</span></span>
<span class="line"><span>305d686276e2   vc-2-geth-lighthouse                             metrics: 8080/tcp -&gt; http://127.0.0.1:32827   RUNNING</span></span></code></pre></div><h2 id="retrieve-the-results" tabindex="-1">Retrieve the Results <a class="header-anchor" href="#retrieve-the-results" aria-label="Permalink to &quot;Retrieve the Results&quot;">​</a></h2><p>After running the test for at least 3 epochs (about 20 minutes), we can view the result at browser <code>http://localhost:35770/</code>.</p><p>The results will be displayed in a table format, showing the strategies and their effectiveness.</p><p>A demo is at <a href="https://bf-online.cryptoeco.org/" target="_blank" rel="noreferrer">bf-online</a>.</p><h2 id="stop-the-test" tabindex="-1">Stop the Test <a class="header-anchor" href="#stop-the-test" aria-label="Permalink to &quot;Stop the Test&quot;">​</a></h2><p>To stop the test, run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./scripts/stop.sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bftest</span></span></code></pre></div><p>Due to the limitations of Kurtosis, the test cannot be restarted once it has stopped.</p><p>The script will dump all service logs to the <code>./logs</code> directory, which can be useful for debugging or further analysis.</p>`,19)]))}const u=a(p,[["render",i]]);export{g as __pageData,u as default};
